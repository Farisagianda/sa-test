name: general-ci
on:
  push:
    paths:
      - '01-general/**'
      - '.github/workflows/general-ci.yml'

jobs:
  build:
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    runs-on: ${{ startsWith(matrix.platform, 'linux/arm64') && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    permissions:
      contents: read
      security-events: write
    env:
      CONTEXT: 01-general
      IMAGE_REPO: docker.io/${{ secrets.DOCKERHUB_USER }}/sa-test
      IMAGE_TAG: v1
      ARCH_TAG: ${{ startsWith(matrix.platform, 'linux/arm64') && 'arm64' || 'amd64' }}
      CACHE_SCOPE: sa-test-${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push (${{ matrix.platform }})
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.CONTEXT }}
          file: ${{ env.CONTEXT }}/Dockerfile
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}-${{ env.ARCH_TAG }}
          cache-from: type=gha,scope=${{ env.CACHE_SCOPE }}
          cache-to:   type=gha,mode=max,scope=${{ env.CACHE_SCOPE }}

      - name: Trivy scan (SARIF)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}-${{ env.ARCH_TAG }}
          scanners: vuln
          format: sarif
          output: ${{ env.CONTEXT }}/reports/trivy-${{ env.ARCH_TAG }}.sarif
          severity: CRITICAL,HIGH
          ignore-unfixed: true
          exit-code: '0'

      - name: SBOM (Syft)
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}-${{ env.ARCH_TAG }}
          format: cyclonedx-json
          output-file: ${{ env.CONTEXT }}/reports/sbom-${{ env.ARCH_TAG }}.cdx.json

      - name: Upload security artifacts (${{ env.ARCH_TAG }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ env.ARCH_TAG }}
          path: ${{ env.CONTEXT }}/reports/
          retention-days: 7

  manifest:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create multi-arch manifest
        run: |
          docker buildx imagetools create \
            -t docker.io/${{ secrets.DOCKERHUB_USER }}/sa-test:v1 \
            docker.io/${{ secrets.DOCKERHUB_USER }}/sa-test:v1-amd64 \
            docker.io/${{ secrets.DOCKERHUB_USER }}/sa-test:v1-arm64
          docker buildx imagetools inspect docker.io/${{ secrets.DOCKERHUB_USER }}/sa-test:v1

  deploy:
    needs: [build, manifest]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Create KinD cluster
        uses: helm/kind-action@v1
        with:
          cluster_name: ci-cluster
          wait: 120s
          config: 01-general/k8s/kind-config.yaml

      - name: Deploy manifests (use amd64 tag)
        working-directory: 01-general
        env:
          IMAGE: docker.io/${{ secrets.DOCKERHUB_USER }}/sa-test:v1-amd64
        run: |
          kubectl get ns sa-test >/dev/null 2>&1 || kubectl create ns sa-test
          # patch image if your manifest doesnâ€™t template it
          sed "s#IMAGE_PLACEHOLDER#${IMAGE}#g" k8s/deployment.yaml | kubectl -n sa-test apply -f -
          kubectl -n sa-test apply -f k8s/service.yaml
          kubectl -n sa-test rollout status deploy/sa-test

      - name: Curl service
        run: |
          for i in {1..10}; do
            if curl -fsS http://127.0.0.1:8080 | head -n 20; then exit 0; fi
            sleep 2
          done
          echo "Service not responding in time" >&2
          kubectl -n sa-test get pods -o wide || true
          kubectl -n sa-test describe pod -l app=sa-test || true
          exit 1