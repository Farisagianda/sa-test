name: general-ci
on:
  push:
    paths:
      - '01-general/**'
      - '.github/workflows/general-ci.yml'

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    env:
      CONTEXT: 01-general
      IMAGE: docker.io/${{ secrets.DOCKERHUB_USER }}/sa-test:v1-hardened

    steps:
      - uses: actions/checkout@v4

      - name: Buildx setup
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build for scan
        working-directory: ${{ env.CONTEXT }}
        run: |
          docker buildx build --load -f Dockerfile-hardened \
            -t "$IMAGE" .

      - name: Make reports dir
        working-directory: ${{ env.CONTEXT }}
        run: mkdir -p reports

      - name: Generate SBOM (Syft)
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.IMAGE }}
          format: cyclonedx-json
          output-file: ${{ env.CONTEXT }}/reports/sbom.cdx.json

      - name: Trivy image scan (gate + SARIF)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.IMAGE }}
          format: sarif
          output: ${{ env.CONTEXT }}/reports/trivy.sarif
          severity: CRITICAL,HIGH
          ignore-unfixed: true
          exit-code: '0'

      - name: Upload SARIF to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.CONTEXT }}/reports/trivy.sarif

      - name: Upload security artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: ${{ env.CONTEXT }}/reports/
          retention-days: 7

      - name: Push image
        run: |
          docker push "$IMAGE"

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Decode kubeconfig from secret
        working-directory: ${{ env.CONTEXT }}
        run: |
          set -euo pipefail
          KCONF="$RUNNER_TEMP/kubeconfig"
          echo "${KUBECONFIG_B64}" | base64 -d > "$KCONF"
          chmod 600 "$KCONF"
          KUBECONFIG="$KCONF" kubectl config use-context minikube
        env:
          KUBECONFIG_B64: ${{ secrets.KUBECONFIG_B64 }}

      - name: Deploy manifests
        working-directory: ${{ env.CONTEXT }}
        run: |
          export KUBECONFIG="$RUNNER_TEMP/kubeconfig"
          kubectl get ns sa-test >/dev/null 2>&1 || kubectl create ns sa-test
          kubectl -n sa-test apply -f k8s/deployment.yaml
          kubectl -n sa-test apply -f k8s/service.yaml
          kubectl -n sa-test rollout status deploy/sa-test